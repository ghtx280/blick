const obj={bg:{prop:"background-color",defVal:""},m:{prop:"margin",defVal:"px"},mt:{prop:"margin-top",defVal:"px"},mr:{prop:"margin-right",defVal:"px"},mb:{prop:"margin-bottom",defVal:"px"},ml:{prop:"margin-left",defVal:"px"},p:{prop:"padding",defVal:"px"},pt:{prop:"padding-top",defVal:"px"},pr:{prop:"padding-right",defVal:"px"},pb:{prop:"padding-bottom",defVal:"px"},pl:{prop:"padding-left",defVal:"px"},c:{prop:"color",defVal:""},fsz:{prop:"font-size",defVal:"px"},round:{prop:"border-radius",defVal:"px"},rotate:{prop:"rotate",defVal:"deg"},hue:{prop:"--hue",defVal:"deg"},w:{prop:"width",defVal:"px"},h:{prop:"height",defVal:"px"},b:{prop:"border-width",defVal:""},bt:{prop:"border-top-width",defVal:"px"},br:{prop:"border-right-width",defVal:"px"},bb:{prop:"border-bottom-width",defVal:"px"},bl:{prop:"border-left-width",defVal:"px"},bc:{prop:"border-color",defVal:""}},st=document.createElement("style");document.head.append(st);const queryStr=Object.keys(obj).map(a=>"[class*=\""+a+"-\"]").join(",")+",[flex],[grid],[text]";var rules="",newRule=(a,b,c,d,e)=>{let f=`[${a}~="${b}"]{${c}:${d+e};}`;rules.includes(f)||(rules+=f)},newFnGRule=(a,b,c,d,e)=>{let f=`[${a}~="${d}"],[${b}~="${d}"]{${c}:${d+e};}`;rules.includes(f)||(rules+=f)};function setStyle(){Array.from(document.querySelectorAll(queryStr)).forEach(a=>{if(a.hasAttribute("flex")||a.hasAttribute("grid")){let b=a.getAttribute("flex"),c=a.getAttribute("grid"),d=a=>!!(parseFloat(a)||a.startsWith("x")||a.startsWith("y"))&&void(a.startsWith("x")?newFnGRule("flex","grid","row-gap",a.slice(1,100),"px"):a.startsWith("y")?newFnGRule("flex","grid","column-gap",a.slice(1,100),"px"):newFnGRule("flex","grid","gap",a,"px"));b&&b.split(" ").forEach(b=>d(b)),c&&c.split(" ").forEach(b=>d(b))}if(a.hasAttribute("text")){let b=a.getAttribute("text").match(/\d+/),c=parseFloat(!!b&&b[0]);c&&newRule("text",c,"font-size",c,"px")}if(a.hasAttribute("class")){let b=a.getAttribute("class"),c=Object.keys(obj);b.split(" ").forEach(a=>{c.forEach(b=>{if(a.startsWith(b+"-")){let c=a.split("-")[1];c.includes("+")?newRule("class",a,obj[b].prop,c.split("+").map(a=>a+obj[b].defVal).join(" "),""):newRule("class",a,obj[b].prop,c,obj[b].defVal)}})})}}),st.textContent=rules}new MutationObserver(setStyle).observe(document.documentElement,{attributes:!0,attributeFilter:["class","flex","grid","hover","text"],childList:!0,subtree:!0});